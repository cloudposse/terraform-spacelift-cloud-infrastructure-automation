---
#
# This is the canonical configuration for the `README.md`
# Run `make readme` to rebuild the `README.md`
#

# Name of this project
name: terraform-spacelift-cloud-infrastructure-automation

# Logo for this project
#logo: docs/logo.png

# License of this project
license: "APACHE2"

# Copyrights
copyrights:
  - name: "Cloud Posse, LLC"
    url: "https://cloudposse.com"
    year: "2021"

# Canonical GitHub repo
github_repo: cloudposse/terraform-spacelift-cloud-infrastructure-automation

# Badges to display
badges:
  - name: "Latest Release"
    image: "https://img.shields.io/github/release/cloudposse/terraform-spacelift-cloud-infrastructure-automation.svg"
    url: "https://github.com/cloudposse/terraform-spacelift-cloud-infrastructure-automation/releases/latest"
  - name: "Slack Community"
    image: "https://slack.cloudposse.com/badge.svg"
    url: "https://slack.cloudposse.com"
  - name: "Discourse Forum"
    image: "https://img.shields.io/discourse/https/ask.sweetops.com/posts.svg"
    url: "https://ask.sweetops.com/"

# List any related terraform modules that this module may be used with or that this module depends on.
# related:
#   - name:
#     description:
#     url:

related:
  - name: "terraform-provider-utils"
    description: "The Cloud Posse Terraform Provider for various utilities."
    url: "https://github.com/cloudposse/terraform-provider-utils"
  - name: "terraform-yaml-stack-config"
    description: "Terraform module that loads an opinionated stack configuration from local or remote YAML sources. It supports deep-merged variables, settings, ENV variables, backend config, and remote state outputs for Terraform and helmfile components."
    url: "https://github.com/cloudposse/terraform-yaml-stack-config"
  - name: "terraform-yaml-config"
    description: "Terraform module to convert local and remote YAML configuration templates into Terraform lists and maps."
    url: "https://github.com/cloudposse/terraform-yaml-config"

# List any resources helpful for someone to get started. For example, link to the hashicorp documentation or AWS documentation.
references:
  - name: "Terraform Version Pinning"
    description: "The required_version setting can be used to constrain which versions of the Terraform CLI can be used with your configuration"
    url: "https://www.terraform.io/docs/configuration/terraform.html#specifying-a-required-terraform-version"
  - name: "Spacelift"
    description: "The most flexible CI/CD for Terraform"
    url: "https://spacelift.io/"
  - name: "Spacelift Documentation"
    description: "Official documentation site for Spacelift"
    url: "https://docs.spacelift.io/"
  - name: "Open Policy Agent"
    description: "Policy-based control for cloud native environments"
    url: "https://www.openpolicyagent.org/"
  - name: "OPA Documentation"
    description: "Open Policy Agent Documentation"
    url: "https://www.openpolicyagent.org/docs/latest/"
  - name: "Rego - OPAâ€™s query and policy language"
    description: "Rego focuses on providing powerful support for referencing nested documents and ensuring that queries are correct and unambiguous"
    url: "https://www.openpolicyagent.org/docs/latest/policy-language/"
  - name: "Example of using Rego policy language"
    description: "Mutating Admissions Controllers with Open Policy Agent and Rego"
    url: "https://blog.gripdev.xyz/2020/01/13/mutating-admissions-controllers-with-open-policy-agent-and-rego/"

# Short description of this project
description: |-
  Terraform module to provision [Spacelift](https://spacelift.io/) resources for cloud infrastructure automation.

# Introduction to the project
#introduction: |-
#  This is an introduction.

# How to use this module. Should be an easy example to copy and paste.

usage: |-

  The first step is to create a new infrastructure repository in GitHub and link it in Spacelift. You will want the `Project root`
  of the infrastructure repository to point to the `top-level` project that contains the reference to this module. Beyond that,
  you will also want to enable the `Administrative` and `Autodeploy` options in the configuration.

  The `Administrative` option allows the top-level project and this module to create all other required configurations, such as stacks,
  policies, and contexts.

  Once you have the top-level project configured and ready, simply trigger it manually, or by pushing an update to the infrastructure
  to Git.

  Here's how to invoke this module in your project:

  ```hcl
  provider "spacelift" {}

  module "example" {
    source = "https://github.com/cloudposse/terraform-spacelift-cloud-infrastructure-automation.git?ref=master"

    config_file_path = "config""
    branch           = "main"
    repository       = "my-infra-repo"

    manage_state = false
  }
  ```

  **IMPORTANT:** Be sure to set the `manage_state` value from the start, otherwise changing this value after deploying a stack may cause resources to be orphaned!

# Example usage
examples: |-
  Here is an example of using this module:
  - [`examples/complete`](https://github.com/cloudposse/terraform-spacelift-cloud-infrastructure-automation/) - complete example of using this module

  We use YAML for the configuration files in order to separate configuration settings from business logic. It's also a portable format that can be used across multiple tools. Our convention is to name files by `$env-$stage.yaml` (e.g. `ue2-testing.yaml`), so for example an `$env` could be `ue2` (for `us-east-2`) and the `$stage` might be `testing`. Workspace names are derived from the `$env-$stage-$component`, which looks like  `ue2-testing-eks`.

  ```yaml
  # Components are all the top-level root modules
  components:
    # Globals are exported as TF_VAR_... environment variables in every workspace
    globals:
      # Used to determine the name of the workspace (e.g. the 'testing' in 'ue2-testing')
      stage: testing
      # Used to determine the name of the workspace (e.g. the 'ue2' in 'ue2-testing')
      environment: ue2
    # The configuration file format is designed to be used across multiple tools.
    # All terraform components should be listed under this section.
    terraform:
      # List one or more Terraform components here
      first-component:
        # Controls whether or not this workspace should be created
        # NOTE: If set to 'false', you cannot reference this workspace via `triggers` in another workspace!
        workspace_enabled: true
        # Override the version of Terraform for this workspace (defaults to the latest in Spacelift)
        terraform_version: 0.13.4
        # Controls the `auto_apply` setting within this workspace
        auto_apply: true
        # Add extra 'Run Triggers' to this workspace, beyond the parent workspace, which is created by default
        # These triggers mean this component workspace will be automatically planned if any of these workspaces are applied.
        triggers:
          - uw2-testing-example2
          - gbl-root-example1
        # Set the Terraform input variable values for this component. Complex types like maps and lists are supported.
        vars:
          my_input_var: "Hello world! This is a value that needs to be passed to my `first-component` Terraform component."
      # Every component should be uniquely named and correspond to a folder in the `components/` directory
      second-component:
        workspace_enabled: true
        # Specify a custom component folder (defalts to the component name if not specified)
        custom_component_folder: my-custom-component-folder
        vars:
          my_input_var: "Hello world! This is another example!"
  ```

  Additionally, you must have a `globals.yaml` present in the `config` folder, which contains environment variables that will be applied to all stacks.

# How to get started quickly
#quickstart: |-
#  Here's how to get started...

# Other files to include in this README from the project folder
include:
  - "docs/targets.md"
  - "docs/terraform.md"

# Contributors to this project
contributors:
  - name: "Erik Osterman"
    github: "osterman"
  - name: "Dan Meyers"
    github: "danjbh"
  - name: "Andriy Knysh"
    github: "aknysh"
